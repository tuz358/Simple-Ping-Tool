package com.kantamori.simpleping;

import android.content.Context;
//import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.ImageView;
import android.widget.TextView;

import java.util.ArrayList;

/**
 * Generated by Kanta Mori on 3/12/2017.
 */

public class HistoryListViewAdapter extends BaseAdapter {
    class Item {
        String node_name;
        Integer node_states;
        Boolean node_selected;
        CheckBox checkBox;
        View view;

        public Item (String node_name, Integer node_states, Boolean node_selected, CheckBox checkBox, View view) {
            this.node_name = node_name;
            this.node_states = node_states;
            this.node_selected = node_selected;
            this.checkBox = checkBox;
            this.view = view;
        }
    }

    private LayoutInflater inflater;
    private int ItemLayoutId;

    ArrayList<Item> items = new ArrayList<>();

    public HistoryListViewAdapter (Context context, int ItemLayoutId, ArrayList node_name, ArrayList node_state){
        super();

        this.inflater = (LayoutInflater)context.getSystemService(context.LAYOUT_INFLATER_SERVICE);
        this.ItemLayoutId = ItemLayoutId;

        for (int i = 0;i < node_name.size();i++) {
            items.add(new Item((String)node_name.get(i), (Integer)node_state.get(i), false, new CheckBox(context), new View(context)));
        }

        //Log.d("items size", ((Integer)items.size()).toString());
    }

    @Override
    public View getView (final int position, View convertView, ViewGroup parent) {

        items.get(position).view = convertView;
        if (items.get(position).view == null) {
            items.get(position).view = inflater.inflate(ItemLayoutId, parent, false);
            TextView txtview_node_name = (TextView)items.get(position).view.findViewById(R.id.txt_node_name);
            ImageView img_node_state = (ImageView)items.get(position).view.findViewById(R.id.img_node_state);
            items.get(position).checkBox = (CheckBox)items.get(position).view.findViewById(R.id.history_node_checkbox);

            txtview_node_name.setText(items.get(position).node_name);
            img_node_state.setImageResource(items.get(position).node_states);

            return items.get(position).view;
        }

        items.get(position).view = convertView;

        TextView txtview_node_name = (TextView)items.get(position).view.findViewById(R.id.txt_node_name);
        ImageView img_node_state = (ImageView)items.get(position).view.findViewById(R.id.img_node_state);
        items.get(position).checkBox = (CheckBox)items.get(position).view.findViewById(R.id.history_node_checkbox);

        txtview_node_name.setText(items.get(position).node_name);
        img_node_state.setImageResource(items.get(position).node_states);

        items.get(position).checkBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                for (int i = 0;i < items.size();i++) {
                    if (buttonView == items.get(position).checkBox) {
                        items.get(position).node_selected = isChecked;
                    }
                }
            }
        });
        items.get(position).checkBox.setChecked(items.get(position).node_selected);

        return convertView;
    }

    public Boolean itemIsChecked (int position) {
        return items.get(position).node_selected;
    }

    public void checkAll (boolean areChecked) {
        for (int i = 0;i < items.size();i++) {
            items.get(i).node_selected = areChecked;
            if (items.get(i).checkBox != null) {
                items.get(i).checkBox.setChecked(areChecked);
            }
        }

        notifyDataSetChanged();
    }

    public ArrayList getCheckedHosts () {
        ArrayList result = new ArrayList();

        for (int i = 0;i < items.size();i++) {
            if (itemIsChecked(i)) {
                result.add(items.get(i).node_name);
                //Log.d("getCheckedHosts", items.get(i).node_name + " position: " + String.valueOf(i));
            } else {
                //Log.d("getCheckedHosts", items.get(i).node_name + " position: " + String.valueOf(i));
            }
        }

        return result;
    }

    public void removeSelectedItems (ArrayList<String> checkedHosts) {

        ArrayList<Item> items2 = new ArrayList<>();
        items2.addAll(items);
        for (Item item : items2) {
            if (checkedHosts.contains(item.node_name)) {
                //Log.d("remove", item.node_name);
                //Log.d("remove", item.node_states.toString());
                //Log.d("remove", item.node_selected.toString());
                //Log.d("remove", item.checkBox.toString());
                items.remove(item);
            }
        }

        /*
        for (int i = 0;i < items.size();i++) {
            if (checkedHosts.contains(items.get(i).node_name)) {
                Log.d("remove", items.get(i).node_name);
                Log.d("remove", items.get(i).node_states.toString());
                Log.d("remove", items.get(i).node_selected.toString());
                Log.d("remove", items.get(i).checkBox.toString());
                items.remove(i);
            }
        }
        */

        /*
        for (int i = 0;i < items.size();i++) {
            if (itemIsChecked(i)) {
                remove(i);
            }
        }
        */

        notifyDataSetChanged();
    }

    /*
    public void remove (int position) {
        Log.d("remove", items.get(position).node_name);
        Log.d("remove", items.get(position).node_states.toString());
        Log.d("remove", items.get(position).node_selected.toString());
        Log.d("remove", items.get(position).checkBox.toString());

        items.remove(position);

        notifyDataSetChanged();
    }
    */

    @Override
    public int getCount () {
        return items.size();
    }

    @Override
    public Object getItem (int position) {
        return items.get(position);
    }

    @Override
    public long getItemId (int position) {
        return 0;
    }
}
