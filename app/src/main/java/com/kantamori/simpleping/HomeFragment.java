package com.kantamori.simpleping;

import android.content.ContentValues;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Handler;
import android.support.v4.app.Fragment;
import android.os.Bundle;
import android.support.v7.preference.PreferenceManager;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.ScrollView;
import android.widget.TextView;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 * Generated by Kanta Mori on 3/12/2017.
 */

public class HomeFragment extends Fragment {
    public static final String FRAGMENT_NAME = HomeFragment.class.getName();

    AutoCompleteTextView txtHost;
    Button enter;
    TextView cmdline;

    Handler handler = new Handler();

    SharedPreferences sharedPreferences;
    static SQLiteDatabase mydb;

    View view;

    @Override
    public void onCreate (Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

    @Override
    public View onCreateView (LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        view = inflater.inflate(R.layout.home_fragment_layout, container, false);

        txtHost = (AutoCompleteTextView)view.findViewById(R.id.txtHost);
        enter = (Button)view.findViewById(R.id.ENTER);
        cmdline = (TextView)view.findViewById(R.id.CmdLine);

        sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getContext());

        txtHost.setText(sharedPreferences.getString("default_host", "localhost"));

        return view;
    }

    @Override
    public void onStart () {
        super.onStart();

        enter.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                if (event.getAction() == MotionEvent.ACTION_DOWN) {
                    enter.setAlpha(0.5f);
                } else if (event.getAction() == MotionEvent.ACTION_UP) {
                    enter.setAlpha(1.0f);
                }
                return false;
            }
        });

        enter.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View v) {
                onEnterClicked();
            }
        });

        cmdline.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void afterTextChanged(Editable s) {
                final ScrollView scrollView = (ScrollView)view.findViewById(R.id.scroll_view_cmd_line);

                scrollView.post(new Runnable() {
                    @Override
                    public void run() {
                        scrollView.fullScroll(View.FOCUS_DOWN);
                    }
                });
            }
        });

    }

    public void onEnterClicked () {

        cmdline.setText("");

        new Thread(new Runnable() {
            @Override
            public void run() {
                SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getContext());
                String ping_count = sharedPreferences.getString("ping_count", "5");
                String targetHost = txtHost.getText().toString();

                Integer node_state = pingProcess(targetHost, ping_count);

                saveHistory(targetHost, node_state);
            }
        }).start();

        //result = executeCmd("ping -c " + ping_count + " " + targetHost);
        //cmdline.setText(result);
        //Boolean ret = simplePing(txtHost.getText().toString(), 5, 1000);
        //cmdline.setText(ret.toString());
    }

    public Integer pingProcess(String host, String ping_count) {
        Integer node_state = 0;

        try {
            Process proc = Runtime.getRuntime().exec("ping -c " + ping_count + " " + host);

            BufferedReader stdInput = new BufferedReader(new InputStreamReader(proc.getInputStream()));
            BufferedReader stdError = new BufferedReader(new InputStreamReader(proc.getErrorStream()));

            String line;
            while ((line = stdInput.readLine()) != null) {
                //stdin.append(line + "\n");
                final String i = line;
                handler.post(new Runnable() {
                    @Override
                    public void run() {
                        cmdline.append(i + "\n");
                    }
                });
            }

            while ((line = stdError.readLine()) != null) {
                final String i = line;
                handler.post(new Runnable() {
                    @Override
                    public void run() {
                        cmdline.append(i + "\n");
                    }
                });
            }

            proc.waitFor();

            Integer exitValue = proc.exitValue();
            node_state = exitValue == 0 ? 1 : 0;
            //node_state = proc.exitValue();
            Log.d("exitValue", String.valueOf(exitValue));

        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }

        //node_state = stderr.toString().equals("") ? 1 : 0;
        return node_state;
    }

    private void saveHistory (String host, Integer ret) {
        HistoryOpenHelper historyOpenHelper = new HistoryOpenHelper(getActivity().getApplicationContext());
        mydb = historyOpenHelper.getWritableDatabase();

        Cursor cursor = mydb.rawQuery("SELECT COUNT(*) FROM mytable", null);
        cursor.moveToFirst();
        Integer record_number = cursor.getInt(0);
        cursor.close();
        //Integer record_number = mydb.rawQuery("SELECT COUNT(*) FROM mytable", null).getCount();

        mydb = historyOpenHelper.getWritableDatabase();

        if (!sharedPreferences.getString("history_save_number", "10").equals("Save all")) {
            if (mydb.rawQuery("SELECT * FROM mytable WHERE host = \"" + host + '\"', null).getCount() == 0) {
                if (record_number.toString().equals(sharedPreferences.getString("history_save_number", "10"))) {
                    try {
                        //Cursor cursor1 = mydb.rawQuery("SELECT MIN(date) FROM mytable", null);
                        //cursor1.moveToFirst();
                        //Integer oldest_record = cursor1.getInt(0);
                        //mydb.delete("mytable", "date=?", new String[]{oldest_record.toString()});
                        mydb.rawQuery("DELETE FROM mytable WHERE date = (SELECT MIN(date) FROM mytable)", null).moveToFirst();
                        //mydb.rawQuery("delete from mytable order by date ASC LIMIT 1", null);
                        //cursor1.close();
                    } finally {
                        mydb.close();
                    }
                }
            }
        }

        mydb = historyOpenHelper.getWritableDatabase();

        ContentValues contentValues = new ContentValues();
        contentValues.put("host", host);
        contentValues.put("state", ret);
        contentValues.put("date", System.currentTimeMillis());

        long result = 0;
        try {
            if (mydb.rawQuery("SELECT * FROM mytable WHERE host = \"" + host + '\"', null).getCount() == 0) {
                result = mydb.insert("mytable", null, contentValues);
            } else {
                result = mydb.update("mytable", contentValues, "host=\"" + host + "\"", null);
            }
        } finally {
            mydb.close();
        }

        /*
        if (result == -1) {
            //Log.d("HomeFragment.java", "Save History failed. host: " + host);
        } else {
            //Log.d("HomeFragment.java", "Record saving successful. host: " + host);
        }

        FileOutputStream outputStream;
        try {
            outputStream = this.getActivity().openFileOutput("history.csv", Context.MODE_APPEND);
            PrintWriter printWriter = new PrintWriter(outputStream);

            printWriter.print(host);
            printWriter.print(",");
            printWriter.print(ret);
            printWriter.println();

            printWriter.flush();
            outputStream.close();
            printWriter.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
        */
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
    }
}
