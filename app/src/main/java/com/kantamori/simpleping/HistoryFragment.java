package com.kantamori.simpleping;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.support.v4.app.Fragment;
import android.os.Bundle;
//import android.util.Log;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.Toast;

import java.util.ArrayList;

/**
 * Generated by Kanta Mori on 3/12/2017.
 */

public class HistoryFragment extends Fragment {
    public static final String FRAGMENT_NAME = HistoryFragment.class.getName();

    static SQLiteDatabase mydb;

    HistoryListViewAdapter historyListViewAdapter;
    ListView historyListView;
    ImageButton imgbtnTrash;
    ImageButton imgbtnCancel;

    ArrayList node_name = new ArrayList();
    ArrayList node_state = new ArrayList();

    View view;

    @Override
    public void onCreate (Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

    @Override
    public View onCreateView (LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        view = inflater.inflate(R.layout.history_fragment_layout, container, false);

        loadHistory();

        historyListViewAdapter = new HistoryListViewAdapter(getContext(), R.layout.history_node_layout, node_name, node_state);
        historyListView = (ListView)view.findViewById(R.id.historyListView);
        historyListView.setAdapter(historyListViewAdapter);
        imgbtnTrash = (ImageButton)view.findViewById(R.id.imgbtnTrash);
        imgbtnCancel = (ImageButton)view.findViewById(R.id.imgbtnCancel);

        historyListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
            @Override
            public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
                ListView listView1 = (ListView)parent;
                listView1.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
                return false;
            }
        });

        return view;
    }

    private void loadHistory () {
        node_name = new ArrayList();
        node_state = new ArrayList();

        HistoryOpenHelper historyOpenHelper = new HistoryOpenHelper(this.getActivity().getApplicationContext());
        mydb = historyOpenHelper.getWritableDatabase();
        Cursor cursor = mydb.rawQuery("SELECT * FROM mytable ORDER BY date DESC", null);

        cursor.moveToFirst();

        for (int i = 0;i < cursor.getCount();i++) {
            node_name.add(cursor.getString(0));
            if (cursor.getInt(1) == 0) {
                node_state.add(R.drawable.circle_red64);
            } else {
                node_state.add(R.drawable.circle_green64);
            }
            cursor.moveToNext();
        }

        try {
            cursor.close();
        } finally {
            mydb.close();
        }
        /*
        try {
            FileReader fileReader = new FileReader("history.csv");
            BufferedReader bufferedReader = new BufferedReader(fileReader);

            String line;
            StringTokenizer tokenizer;
            while ((line = bufferedReader.readLine()) != null) {
                tokenizer = new StringTokenizer(line, ",");
                node_name.add(tokenizer.nextToken());
                node_state.add(Boolean.valueOf(tokenizer.nextToken()));
            }
            bufferedReader.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
        */
    }

    private void deleteHistory (String host){
        HistoryOpenHelper historyOpenHelper = new HistoryOpenHelper(this.getActivity().getApplicationContext());
        mydb = historyOpenHelper.getWritableDatabase();

        long result = 0;
        try {
            result = mydb.delete("mytable", "host=?", new String[]{host});
        } finally {
            mydb.close();
        }

        if (result == -1) {
            Toast.makeText(getContext(), "Record deletion failed", Toast.LENGTH_LONG).show();
            //Log.d("HistoryFragment.java", "Record deletion failed. host: " + host);
        } /*else {
            //Log.d("HistoryFragment.java", "Record deletion successful. host: " + host);
        }
        */
    }

    public void onTrashClicked () {
        ArrayList node_name_list = historyListViewAdapter.getCheckedHosts();

        historyListViewAdapter.removeSelectedItems(node_name_list);

        for (Object node_name : node_name_list) {
            deleteHistory(node_name.toString());
        }
        historyListView.setAdapter(historyListViewAdapter);
    }

    public void onCancelClicked () {
       historyListViewAdapter.checkAll(false);
    }

    @Override
    public void onStart () {
        super.onStart();

        imgbtnTrash.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                if (event.getAction() == MotionEvent.ACTION_DOWN) {
                    imgbtnTrash.setAlpha(0.5f);
                } else if (event.getAction() == MotionEvent.ACTION_UP) {
                    imgbtnTrash.setAlpha(1.0f);
                }
                return false;
            }
        });

        imgbtnTrash.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                onTrashClicked();
            }
        });

        imgbtnCancel.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                if (event.getAction() == MotionEvent.ACTION_DOWN) {
                    imgbtnCancel.setAlpha(0.5f);
                } else if (event.getAction() == MotionEvent.ACTION_UP) {
                    imgbtnCancel.setAlpha(1.0f);
                }
                return false;
            }
        });

        imgbtnCancel.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                onCancelClicked();
            }
        });

    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
    }
}
